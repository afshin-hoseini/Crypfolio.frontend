import React, { FC, useEffect, useRef, useState } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ReferenceLine,
  ResponsiveContainer,
  Cell,
} from 'recharts';

const data: Vault[] = [
  {
    symbol: 'BTC',
    currentPrice: 10600.438239,
    profitAmount: 30,
    profitPercentage: 10,
    remainingAmount: 0.0593254,
    totalBuy: 1400.56456,
    totalSell: 49094,
  },
  {
    symbol: 'XTZ',
    currentPrice: 4.0345,
    profitAmount: -42.54,
    profitPercentage: -120,
    remainingAmount: 10,
    totalBuy: 800,
    totalSell: 910,
  },
  {
    symbol: 'TRX',
    currentPrice: 0.0345,
    profitAmount: 5,
    profitPercentage: 6,
    remainingAmount: 130,
    totalBuy: 100.56456,
    totalSell: 10,
  },
  {
    symbol: 'LEND',
    currentPrice: 0.5784,
    profitAmount: 10,
    profitPercentage: 30,
    remainingAmount: 130,
    totalBuy: 100.56456,
    totalSell: 10,
  },
];

const yDomain = (function () {
  return data.reduce((max, d) => Math.max(Math.abs(max), Math.abs(d.profitPercentage ?? 0)), 0);
})();
export const OverviewBarChart: FC = () => {
  const [rectHeight, setRectHeight] = useState<number>(0);

  useEffect(() => {
    setTimeout(() => {
      const svgContainer = document.querySelector('.recharts-surface');
      const rectHeight = svgContainer
        ?.querySelector?.('defs')
        ?.firstElementChild?.firstElementChild?.getAttribute?.('height');

      setRectHeight(Number.parseFloat(rectHeight || '0'));
    }, 10);
  }, []);

  return (
    <div
      style={{ height: 300, position: 'relative', opacity: `${rectHeight ? 1 : 0}`, transition: '0.3s ease' }}
      className="text-secondary-text"
    >
      <div
        style={{
          width: '100%',
          height: 1,
          backgroundColor: 'black',
          position: 'absolute',
          top: `${rectHeight / 2}px`,
          display: `${rectHeight ? 'block' : 'none'}`,
        }}
      ></div>
      {/* <ResponsiveContainer> */}
      <BarChart width={500} height={250} data={data} barCategoryGap={0} barSize={15}>
        <XAxis dataKey="symbol" axisLine={false} tickLine={false} />
        <YAxis domain={[-yDomain, yDomain]} tick={false} axisLine={false} height={200} />
        <Tooltip />
        <ReferenceLine y={0} stroke={`${rectHeight ? '#0000' : '#000'}`} strokeWidth={1} />
        <Bar dataKey="profitPercentage">
          {data.map((entry, index) => (
            <Cell
              key={`cell-${index}`}
              strokeWidth={index === 2 ? 4 : 1}
              fill={(entry.profitPercentage ?? 0) > 0 ? 'green' : 'red'}
              width={15}
            />
          ))}
        </Bar>
      </BarChart>
      {/* </ResponsiveContainer> */}
    </div>
  );
};
